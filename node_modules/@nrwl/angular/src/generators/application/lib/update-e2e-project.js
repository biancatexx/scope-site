"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateE2eProject = void 0;
const devkit_1 = require("@nrwl/devkit");
const linter_1 = require("@nrwl/linter");
function updateE2eProject(host, options) {
    const spec = `${options.e2eProjectRoot}/src/app.e2e-spec.ts`;
    const content = host.read(spec, 'utf-8');
    host.write(spec, content.replace(`${options.name} app is running!`, `Welcome to ${options.name}!`));
    const page = `${options.e2eProjectRoot}/src/app.po.ts`;
    const pageContent = host.read(page, 'utf-8');
    host.write(page, pageContent.replace(`.content span`, `header h1`));
    // update workspace.json / angular.json
    devkit_1.updateJson(host, devkit_1.getWorkspacePath(host), (json) => {
        const project = {
            root: options.e2eProjectRoot,
            projectType: 'application',
            targets: {
                e2e: json.projects[options.name].architect.e2e,
                lint: options.linter === linter_1.Linter.None
                    ? undefined
                    : {
                        builder: '@nrwl/linter:eslint',
                        options: {
                            lintFilePatterns: [`${options.e2eProjectRoot}/**/*.ts`],
                        },
                    },
            },
        };
        project.targets.e2e.options.protractorConfig = `${options.e2eProjectRoot}/protractor.conf.js`;
        json.projects[options.e2eProjectName] = project;
        delete json.projects[options.name].architect.e2e;
        return json;
    });
    // update tsconfig e2e
    if (!host.exists(`${options.e2eProjectRoot}/tsconfig.e2e.json`)) {
        host.write(`${options.e2eProjectRoot}/tsconfig.e2e.json`, '{}');
    }
    devkit_1.updateJson(host, `${options.e2eProjectRoot}/tsconfig.e2e.json`, (json) => {
        return Object.assign(Object.assign({}, json), { extends: `./tsconfig.json`, compilerOptions: Object.assign(Object.assign({}, json.compilerOptions), { outDir: `${devkit_1.offsetFromRoot(options.e2eProjectRoot)}dist/out-tsc` }) });
    });
    // update tsconfig
    devkit_1.updateJson(host, `${options.e2eProjectRoot}/tsconfig.json`, (json) => {
        return Object.assign(Object.assign({}, json), { extends: `${devkit_1.offsetFromRoot(options.e2eProjectRoot)}tsconfig.base.json` });
    });
}
exports.updateE2eProject = updateE2eProject;
//# sourceMappingURL=update-e2e-project.js.map